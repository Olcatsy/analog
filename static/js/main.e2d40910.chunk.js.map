{"version":3,"sources":["components/Header.js","components/Home.js","firebase.js","components/draw/PostButton.js","components/draw/NewDrawingButton.js","components/draw/ClearButton.js","components/draw/Canvas.js","components/draw/Draw.js","components/Gallery.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","aria-label","value","onClick","this","props","changePage","Component","Home","href","startDrawing","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PostButton","pushToDb","e","preventDefault","dbRef","database","ref","userDrawing","push","prompt","chosenPrompt","imgString","setState","modalMessage","showModal","setTimeout","state","NewDrawingButton","newDrawing","ClearButton","clear","Canvas","x","y","r","refs","canvas","getBoundingClientRect","type","nativeEvent","touches","clientX","left","clientY","top","offsetX","offsetY","isDrawing","draw","ctx","getContext","beginPath","moveTo","lineTo","stroke","captureDrawing","endDrawing","drawingUrl","toDataURL","drawingStr","clearRect","width","height","randomizePrompts","window","innerWidth","strokeStyle","lineJoin","lineCap","lineWidth","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","Draw","randomIndex","Math","floor","random","wordPrompts","length","Gallery","drawings","isLoading","on","response","dataFromDb","val","imgArr","key","unshift","map","item","i","src","alt","Footer","title","target","aria-hidden","App","currentPage","pageToDisplay","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2d40910.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"wrapper flexParent\">\r\n\r\n          {/* TITLE */}\r\n          <h1>Analog</h1>\r\n\r\n          {/* NAV */}\r\n          <nav aria-label=\"navigation\">\r\n\r\n            <ul>\r\n              <li> <button className=\"navButton homeButton\" value=\"home\" onClick={this.props.changePage}>Home</button></li>\r\n              <li> <button className=\"navButton drawButton\" value=\"draw\" onClick={this.props.changePage}>Draw</button></li>\r\n              <li> <button className=\"navButton galleryButton\" value=\"gallery\" onClick={this.props.changePage}>Gallery</button></li>\r\n            </ul>\r\n\r\n          </nav>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"homeScreen\">\r\n        <div className=\"homeContainer\">\r\n          <p>Many people are put off by visual arts because they think they are bad at it. When we are young, those of us that can draw realistically are considered “gifted”, but the rest internalize the idea that you need “talent” to be able to draw. However, I believe that <em>drawing is just another communication skill</em>, like reading and writing, that anyone can learn, and can be useful no matter what you do in life. </p>\r\n\r\n          <p><em>Let’s do a creative exercise!</em>  Forget about drawing realistically, you don’t need that to be able to express yourself and have fun. Instead, you will create <em>analog drawings</em>. You will get a one-word prompt of an abstract idea (e.g. anger, depression, joy) that you have to sketch out without drawing any recognizable objects, only through shapes and lines. You can also see how other people interpreted these concepts in the Gallery! Hope you enjoy the process and find it useful for developing your visual communication skill.</p>\r\n\r\n          <p className=\"smallCopy\">(I’ve adapted this exercise from a great book by <a href=\"https://www.drawright.com/\">Betty Edwards</a> called <em>Drawing on the Artist Within</em>  (specifically Chapter 7). I highly recommend it if you want to improve your creative process, or if you want to learn drawing but don’t know where to start)</p>\r\n\r\n          <button className=\"startButton yellowButton\" value=\"draw\" onClick={this.props.startDrawing}>Let's draw</button>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import firebase from 'firebase';\r\n\r\n// initialize firebase\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB7RHaKc0W2HjhoCLYK_k8oddFYSTcfYYc\",\r\n  authDomain: \"metaphor-b5672.firebaseapp.com\",\r\n  databaseURL: \"https://metaphor-b5672.firebaseio.com\",\r\n  projectId: \"metaphor-b5672\",\r\n  storageBucket: \"metaphor-b5672.appspot.com\",\r\n  messagingSenderId: \"344226260457\",\r\n  appId: \"1:344226260457:web:49dcd90730cdf5526b9778\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport firebase from '../../firebase';\r\n\r\n// takes the drawing blob object from the parent component as a prop\r\n// pushes the blob into the database\r\n// shows a confirmation that the drawing was posted\r\n\r\nclass PostButton extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      showModal: false,\r\n      modalMessage: \"\",\r\n    }\r\n  }\r\n\r\n  pushToDb = (e) => {\r\n    e.preventDefault();\r\n\r\n    // database reference\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // if user drew anything, it will get pushed to the database and a success modal will be shown. If not, the modal will prompt the user to draw something\r\n    if (this.props.userDrawing) {\r\n      // push the drawing into the database\r\n      dbRef.push({\r\n        prompt: this.props.chosenPrompt,\r\n        imgString: this.props.userDrawing,\r\n      });\r\n\r\n      // display a success message\r\n      this.setState ({\r\n        modalMessage: \"Thank you for posting!\",\r\n      })\r\n    } else {\r\n      this.setState({\r\n        modalMessage: \"Please draw something!\",\r\n      })\r\n    }\r\n\r\n    // shows the modal\r\n    this.setState({\r\n      showModal: true,\r\n    })\r\n\r\n    // will hide the modal after 3s\r\n    setTimeout(() => {\r\n      this.setState({\r\n        showModal: false,\r\n      })\r\n    }, 3000)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"post\">\r\n        <button className=\"yellowButton canvasButton\" onClick={this.pushToDb}>Post</button>\r\n\r\n        {\r\n          this.state.showModal \r\n          ? <div className=\"postModal\">{this.state.modalMessage}</div>\r\n          : null\r\n        }\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default PostButton;","import React from 'react';\r\n\r\n\r\n\r\nconst NewDrawingButton = (props) => {\r\n  // clears the canvas and offers a new prompt\r\n\r\n  return (\r\n    <button className=\"yellowButton canvasButton\" onClick={props.newDrawing}>New Drawing</button>\r\n  );\r\n}\r\n\r\nexport default NewDrawingButton;","import React from 'react';\r\n\r\n\r\n\r\nconst ClearButton = (props) => {\r\n  // clears the canvas\r\n\r\n  return (\r\n    <button className=\"yellowButton canvasButton\" onClick={props.clear}>Clear</button>\r\n  );\r\n}\r\n\r\nexport default ClearButton;","import React, { Component } from 'react';\r\n\r\nimport PostButton from './PostButton';\r\nimport NewDrawingButton from './NewDrawingButton';\r\nimport ClearButton from './ClearButton';\r\n\r\n\r\n\r\nclass Canvas extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      // keeps track of whether the user is drawing or not\r\n      isDrawing: false,\r\n      // stores the coordinates of the last event\r\n      x: 0,\r\n      y: 0,\r\n      // stores the drawing as a base64 string\r\n      drawingStr: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.refs.canvas;\r\n    // sets up canvas context\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.canvas.width = 500;\r\n    ctx.canvas.height = 500;\r\n    if (window.innerWidth < 500) {\r\n      ctx.canvas.width = window.innerWidth -10;\r\n      ctx.canvas.height = window.innerWidth -10;\r\n    }\r\n\r\n\r\n    // stroke style\r\n    ctx.strokeStyle = 'black';\r\n    // shape of the stroke essentially & making sure the line is continuous\r\n    ctx.lineJoin = 'round';\r\n    ctx.lineCap = 'round';\r\n    // size of the stroke\r\n    ctx.lineWidth = 10;\r\n  }\r\n\r\n  // start drawing\r\n  startDrawing = (e) => {\r\n    e.preventDefault();\r\n    const canvas = this.refs.canvas;\r\n    const r = canvas.getBoundingClientRect(); // gets canvas size and position relative to the viewport\r\n    let x;\r\n    let y;\r\n\r\n    // check event type\r\n    if (e.type === \"touchstart\") {\r\n      \r\n      // gets event coordinates relative to the canvas. clientX is event coordinate relative to the viewport. r.left is canvas' offset relative to the viewport\r\n      x = e.nativeEvent.touches[0].clientX - r.left; \r\n      y = e.nativeEvent.touches[0].clientY - r.top;\r\n    } else {\r\n      x = e.nativeEvent.offsetX;\r\n      y = e.nativeEvent.offsetY;\r\n    }\r\n\r\n    this.setState ({\r\n      isDrawing: true,\r\n      x: x,\r\n      y: y,\r\n    })\r\n  }\r\n\r\n  // drawing \r\n  draw = (e) => {\r\n    e.preventDefault();\r\n    const canvas = this.refs.canvas;\r\n    const ctx = canvas.getContext('2d');\r\n    const r = canvas.getBoundingClientRect();\r\n    let x;\r\n    let y;\r\n\r\n    if (this.state.isDrawing) {\r\n\r\n      // check event type\r\n      if (e.type === \"touchmove\") {\r\n        x = e.nativeEvent.touches[0].clientX - r.left;\r\n        y = e.nativeEvent.touches[0].clientY - r.top;\r\n      } else {\r\n        x = e.nativeEvent.offsetX;\r\n        y = e.nativeEvent.offsetY;\r\n      }\r\n\r\n      // starts drawing a path \r\n      ctx.beginPath();\r\n\r\n      // drawing a line requires two coordinates:\r\n      // start drawing at this coordinate (endpoint of the last event)\r\n      ctx.moveTo(this.state.x, this.state.y);\r\n      // end drawing at this coordinate (current event's coordinate)\r\n      ctx.lineTo(x, y);\r\n\r\n      // draws a path\r\n      ctx.stroke();\r\n\r\n      // updates last event's coordinates with current coordinates\r\n      this.setState ({\r\n        x: x,\r\n        y: y,\r\n      })\r\n\r\n      this.captureDrawing();\r\n    }\r\n  }\r\n\r\n\r\n  // end drawing\r\n  endDrawing = () => {\r\n    this.setState ({\r\n      isDrawing: false,\r\n    })\r\n  }\r\n\r\n\r\n  // as the user is drawing,   continuously convert the current drawing into a base64 string (plain text representation of an image) and save it in the component state\r\n  captureDrawing = () => {\r\n    const canvas = this.refs.canvas;\r\n\r\n    // convert the path on the canvas into the base64 string\r\n    const drawingUrl = canvas.toDataURL();\r\n\r\n    // the base64 string is pushed into the component's state\r\n    this.setState({\r\n      drawingStr: drawingUrl,\r\n    })\r\n  }\r\n\r\n\r\n  // clears the canvas and resets drawing string in the component state\r\n  clear = () => {\r\n    const canvas = this.refs.canvas;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    this.setState ({\r\n      drawingStr: \"\",\r\n    })\r\n  }\r\n\r\n  // clear the canvas and start a new drawing\r\n  newDrawing = () => {\r\n    this.props.randomizePrompts();\r\n    this.clear(); \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"canvasInnerContainer\">\r\n\r\n        <canvas className=\"canvas\"\r\n        ref='canvas' \r\n        onMouseDown={this.startDrawing} onMouseMove={this.draw} onMouseUp={this.endDrawing} onMouseLeave={this.endDrawing} onTouchStart={this.startDrawing} onTouchMove={this.draw} onTouchEnd={this.endDrawing}>\r\n          Your browser does not support canvas element\r\n        </canvas>\r\n        \r\n        <div className=\"canvasButtons\">\r\n\r\n          <ClearButton className=\"canvasButton\" clear={this.clear}/>\r\n\r\n          <NewDrawingButton className=\"canvasButton\" newDrawing={this.newDrawing}/>\r\n          \r\n          <PostButton className=\"canvasButton\" userDrawing={this.state.drawingStr} chosenPrompt={this.props.chosenPrompt}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;","import React, { Component } from 'react';\r\n\r\nimport Canvas from './Canvas';\r\n\r\n\r\n\r\nclass Draw extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      userDrawing: {},\r\n      wordPrompts: [\"Anger\", \"Anxiety\", \r\n        \"Tranquility\", \"Depression\", \"Soft\", \"Chaos\", \"Order\", \"Joy\", \"Sickness\", \"Energy\", \"Death\", \"Love\", \"Dream\", \"Fragility\", \"Growth\", \"Loneliness\", \"Movement\", \"Shock\", \"Fatigue\", ],\r\n      chosenPrompt: \"\",\r\n    }\r\n  }\r\n\r\n  randomizePrompts = () => {\r\n    // get a random index from the wordPrompts array\r\n    const randomIndex = Math.floor(Math.random() * (this.state.wordPrompts.length));\r\n    \r\n    this.setState({\r\n      chosenPrompt: this.state.wordPrompts[randomIndex],\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.randomizePrompts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"draw\">\r\n\r\n        <div className=\"canvasOuterContainer\">\r\n          <p className=\"prompt\">Your prompt is <em>{this.state.chosenPrompt}</em>.</p>\r\n          <Canvas chosenPrompt={this.state.chosenPrompt} randomizePrompts={this.randomizePrompts}/>\r\n        </div>\r\n\r\n        <ul className=\"drawCopy\">\r\n          <li>\r\n            <p>Consider your prompt. Try to imagine what the concept feels like to you. If it’s an emotion, try to remember the last time you felt it. What kind of marks and shapes would you use to render it? Straight lines? Squiggles? Tiny dots? How much space would your drawing occupy?</p>\r\n          </li>\r\n          <li>\r\n            <p>Avoid drawing recognizable objects or symbols! We are going for pure abstraction :)</p>\r\n          </li>\r\n          <li>\r\n            <p>Don’t overthink your drawing or try to visualize it beforehand, let your feelings pass through your hands and render themselves on the drawing pad.</p>\r\n          </li>\r\n          <li>\r\n            <p>Take as much time as you need. There’s no right or wrong way to do this, your drawing is unique to you</p>\r\n          </li>\r\n          <li>\r\n            <p>Try not to look at other people’s drawings before you draw, it’s more fun that way!</p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Draw;","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\n\r\n// retrieve image strings from the database and store it in an array\r\n// loop through the array of image strings, and append an img element to the page, with the strings as their url's\r\n\r\nclass Gallery extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      drawings: [],\r\n      isLoading: true,\r\n    }        \r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // retrieve saved drawings from the database and save them as an array in the component state\r\n    dbRef.on('value', (response) => {\r\n      // fetches data from the database as objects\r\n      const dataFromDb = response.val();\r\n\r\n      // stores base64 image strings from the database\r\n      const imgArr = [];\r\n\r\n      for (let key in dataFromDb) {\r\n        imgArr.unshift(dataFromDb[key]);\r\n      }\r\n\r\n      this.setState ({\r\n        drawings: imgArr,\r\n        isLoading: false,\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"gallery\">\r\n        <p>It’s really interesting to compare your analog drawings with the ones done by other people. Do their renditions of the same concept look like yours? You might see some similarities, yet every drawing has its own unique characteristics. Although we all experience roughly the same emotions, the intensity and quality of these emotions is different between individuals. <em>Your drawing makes your emotions visible.</em></p>\r\n\r\n        {\r\n          this.state.isLoading\r\n          ? \r\n          <div className=\"galleryPreloader\"></div>\r\n          : \r\n          <div className=\"galleryGrid\">\r\n            {this.state.drawings.map( (item, i) => {\r\n              return (\r\n                <div className=\"userDrawing\">\r\n                  <img src={item.imgString} alt={item.prompt} key={i}></img>\r\n                  <p>{item.prompt}</p>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;","import React from 'react';\r\n\r\n\r\n\r\nconst Footer = () => {\r\n\r\n  return (\r\n    <footer>\r\n      {/* social */}\r\n      <ul>\r\n        <li>\r\n          {/* Website */}\r\n          <a aria-label=\"Olga's website\" href=\"http://olgafil.com/\" title=\"olgafil.com\" target=\"_blank\"><i className=\"fas fa-external-link-alt\" aria-hidden=\"true\"></i></a>\r\n        </li>\r\n        <li>\r\n          {/* Twitter */}\r\n          <a aria-label=\"Olga's Twitter\" href=\"https://twitter.com/OlgaFilCodes\" title=\"Twitter\" target=\"_blank\"><i className=\"fab fa-twitter\" aria-hidden=\"true\"></i></a>\r\n        </li>\r\n        <li>\r\n          {/* Codepen */}\r\n          <a aria-label=\"Olga's Codepen\" href=\"https://codepen.io/OlgaFil\" title=\"CodePen\" target=\"_blank\"><i className=\"fab fa-codepen\" aria-hidden=\"true\"></i></a>\r\n        </li>\r\n        <li>\r\n          {/* GitHub */}\r\n          <a aria-label=\"Olga's GitHub\" href=\"https://github.com/Olcatsy\" title=\"GitHub\" target=\"_blank\"><i className=\"fab fa-github\" aria-hidden=\"true\"></i></a>\r\n        </li>\r\n      </ul>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Header from './components/Header';\r\nimport Home from './components/Home';\r\nimport Draw from './components/draw/Draw';\r\nimport Gallery from './components/Gallery';\r\nimport Footer from './components/Footer';\r\n\r\n\r\n\r\n\r\n// APP\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      currentPage: \"home\",\r\n    }\r\n  }\r\n\r\n  // tells the component which page to render (draw or gallery) when nav buttons are clicked\r\n  changePage = (e) => {\r\n    this.setState ({\r\n      currentPage: e.target.value,\r\n    })\r\n  }\r\n\r\n  // selects a random prompt for the user to draw\r\n  randomizePrompts = () => {\r\n    // get a random index from the wordPrompts array\r\n    const randomIndex = Math.floor(Math.random() * (this.state.wordPrompts.length));\r\n\r\n    this.setState({\r\n      chosenPrompt: this.state.wordPrompts[randomIndex],\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    let pageToDisplay;\r\n\r\n    // nav functionality\r\n    if (this.state.currentPage === \"home\") {\r\n      pageToDisplay = <Home startDrawing={this.changePage}/>;\r\n    } else if (this.state.currentPage === \"draw\") {\r\n      pageToDisplay = <Draw />;\r\n    } else if (this.state.currentPage === \"gallery\") {\r\n      pageToDisplay = <Gallery />;\r\n    } \r\n\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        {/* HEADER */}\r\n        <Header changePage={this.changePage}/>\r\n        {/* END OF HEADER */}\r\n\r\n\r\n        {/* MAIN */}\r\n        <main>\r\n          <div className=\"wrapper\">\r\n            {pageToDisplay}\r\n          </div>\r\n        </main>\r\n        {/* END OF MAIN */}\r\n\r\n\r\n        {/* FOOTER */}\r\n        <Footer />\r\n        {/* END OF FOOTER */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}